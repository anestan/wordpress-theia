<?php
/*
Plugin Name:       Woocommerce Monster Widget
Description:       A widget that allows for quick and easy testing of multiple woocommerce widgets. Suggested for woocommmerce developer and not intended for production.
Version:           1.0.2
Author:            Alispx
Author URI:        http://alispx.me/
License:           GPLv2 or later
*/

/**
 * Register the Woocommerce Monster Widget.
 *
 * Hooks into the widgets_init action.
 *
 * @since 0.1
 */
add_action( 'widgets_init', 'register_wc_monster_widget' );
function register_wc_monster_widget() {
	register_widget( 'WC_Monster_Widget' );
}

/**
 * Woocommerce Monster Widget.
 *
 * A widget that allows for quick and easy testing of multiple woocommerce widgets.
 *
 * @since 0.1
 */
class WC_Monster_Widget extends WP_Widget {

	/**
	 * Iterator (int).
	 *
	 * Used to set a unique html id attribute for each
	 * widget instance generated by WC_Monster_Widget::widget().
	 *
	 * @since 0.1
	 */
	static $iterator = 1;

	/**
	 * Constructor.
	 *
	 * @since 0.1
	 */
	public function __construct() {
		parent::__construct( 'wc-monster', __( 'Woocommerce Monster Widget', 'wc-monster-widget' ), array(
			'classname'   => 'wc_monster_widget',
			'description' => __( 'Test multiple woocommerce widgets at the same time.', 'wc-monster-widget' )
		) );
	}

	/**
	 * Print the Monster widget on the front-end.
	 *
	 * @uses $wp_registered_sidebars
	 * @uses Monster_Widget::$iterator
	 * @uses Monster_Widget::get_widget_class()
	 * @uses $this->get_widget_config()
	 *
	 * @since 0.1
	 */
	public function widget( $args, $instance ) {
		global $wp_registered_sidebars;

		$id = $args['id'];
		$args = $wp_registered_sidebars[$id];
		$before_widget = $args['before_widget'];

		foreach( $this->get_widget_config() as $widget ) {
			$_instance = ( isset( $widget[1] ) ) ? $widget[1] : null;

			$args['before_widget'] = sprintf(
				$before_widget,
				'woo-monster-widget-placeholder-' . self::$iterator,
				$this->get_widget_class( $widget[0] )
			);

			// Override cache for the Recent Posts widget.
			if ( 'WC_Widget_Product_Tag_Cloud' == $widget[0] )
				$args['widget_id'] = 'wc-monster-widget-tag-cloud-' . self::$iterator;

			the_widget( $widget[0], $_instance, $args );

			self::$iterator++;
		}
    }

	/**
	 * Widgets (array).
	 *
	 * Numerically indexed array of Pre-configured widgets to
	 * display in every instance of a Monster widget. Each entry
	 * requires two values:
	 *
	 * 0 - The name of the widget's class as registered with register_widget().
	 * 1 - An associative array representing an instance of the widget.
	 *
	 * This list can be altered by using the `wc-monster-widget-config` filter.
	 *
	 * @return array Widget configuration.
	 * @since 0.1
	 */
	public function get_widget_config() {

		$widgets = array(

			array( 'WC_Widget_Cart', array(
				'title'    		=> __( 'Cart', 'wc-monster-widget' ),
			) ),

			array( 'WC_Widget_Product_Search', array(
				'title'    		=> __( 'Search Product', 'wc-monster-widget' ),
			) ),

			array( 'WC_Widget_Layered_Nav_Filters', array(
				'title'    		=> __( 'Layered Nav Filter', 'wc-monster-widget' ),
			) ),

			array( 'WC_Widget_Layered_Nav', array(
				'title'    			=> __( 'Layered Nav List', 'wc-monster-widget' ),
				'attribute'    		=> 'color',
				'display_type'    	=> 'list',
				'query_type'    	=> 'or',
			) ),

			array( 'WC_Widget_Layered_Nav', array(
				'title'    			=> __( 'Layered Nav Dropdown', 'wc-monster-widget' ),
				'attribute'    		=> 'color',
				'display_type'    	=> 'dropdown',
				'query_type'    	=> 'or',
			) ),

			array( 'WC_Widget_Price_Filter', array(
				'title'    		=> __( 'Price Filter', 'wc-monster-widget' ),
			) ),

			array( 'WC_Widget_Product_Categories', array(
				'title'    			=> __( 'Product Categories Dropdown', 'wc-monster-widget' ),
				'orderby'    		=> 'name',
				'dropdown'    		=> 1,
				'count'    			=> 1,
				'hierarchical'  	=> 1,
				'show_children_only'=> 0,
			) ),

			array( 'WC_Widget_Product_Categories', array(
				'title'    			=> __( 'Product Categories List', 'wc-monster-widget' ),
				'orderby'    		=> 'name',
				'dropdown'    		=> 0,
				'count'    			=> 1,
				'hierarchical'  	=> 1,
				'show_children_only'=> 0,
			) ),

			array( 'WC_Widget_Product_Tag_Cloud', array(
				'title'    			=> __( 'Product Tag Cloud', 'wc-monster-widget' ),
			) ),

			array( 'WC_Widget_Products', array(
				'title'    			=> __( 'All Products', 'wc-monster-widget' ),
				'number'    		=> 5,
				'show'    			=> '',
				'orderby'    		=> 'date',
				'order'    			=> 'desc',
				'hide_free' 		=> 0,
				'show_hidden' 		=> 0
			) ),

			array( 'WC_Widget_Products', array(
				'title'    			=> __( 'Featured Products', 'wc-monster-widget' ),
				'number'    		=> 5,
				'show'    			=> 'featured',
				'orderby'    		=> 'date',
				'order'    			=> 'desc',
				'hide_free' 		=> 0,
				'show_hidden' 		=> 0
			) ),

			array( 'WC_Widget_Products', array(
				'title'    			=> __( 'Products On-Sale', 'wc-monster-widget' ),
				'number'    		=> 5,
				'show'    			=> 'onsale',
				'orderby'    		=> 'date',
				'order'    			=> 'desc',
				'hide_free' 		=> 0,
				'show_hidden' 		=> 0
			) ),

			array( 'WC_Widget_Recent_Reviews', array(
				'title'    			=> __( 'Recent Reviews', 'wc-monster-widget' ),
				'number'    		=> 5,
			) ),

			array( 'WC_Widget_Recently_Viewed', array(
				'title'    			=> __( 'Recently Viewed Products', 'wc-monster-widget' ),
				'number'    		=> 5,
			) ),

			array( 'WC_Widget_Top_Rated_Products', array(
				'title'    			=> __( 'Top Rated Products', 'wc-monster-widget' ),
				'number'    		=> 5,
			) ),

		);


		return apply_filters( 'wc-monster-widget-config', $widgets );
	}

	/**
	 * Get the html class attribute value for a given widget.
	 *
	 * @uses $wp_widget_factory
	 *
	 * @param string $widget The name of a registered widget class.
	 * @return string Dynamic class name a given widget.
	 *
	 * @since 0.1
	 */
	public function get_widget_class( $widget ) {
		global $wp_widget_factory;

		$widget_obj = '';
		if ( isset( $wp_widget_factory->widgets[$widget] ) )
			$widget_obj = $wp_widget_factory->widgets[$widget];

		if ( ! is_a( $widget_obj, 'WP_Widget') )
			return '';

		if ( ! isset( $widget_obj->widget_options['classname'] ) )
			return '';

		return $widget_obj->widget_options['classname'];
	}


}